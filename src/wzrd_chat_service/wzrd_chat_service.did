type GroupMessage = record {
    "id": text;
    "sender_id": text;
    "reply_id": opt text;
    "content": text;
    "timestamp": text;
};
type DirectMessage = record {
    "id": text;
    "sender_id": text;
    "receiver_id": text;
    "reply_id": opt text;
    "content": text;
    "timestamp": text;
    "viewed": bool;
};
type CreateGroupParams = record {
    "token": text;
    "group_id": text; 
    "group_name": text; 
    "group_description": opt text;
};
type LeaveGroupParams = record {
    "token": text;
    "group_id": text;
};
type JoinGroupParam = record {
    "token": text;
    "group_id": text;
};
type SendGroupMessageParam = record {
    "token": text;
    "group_id": text; 
    "reply_id": opt text;
    "content": text;
};
type SendDirectMessageParam = record {
    "token": text;
    "receiver": text; 
    "reply_id": opt text;
    "content": text;
};
type GetDirectMessageParam = record {
    "token": text;
    "receiver": text;
};
service : {
    "a.CreateGroup": (params: CreateGroupParams) -> (record{token: text; result: bool; error: text;});
    "b.JoinGroup": (params: JoinGroupParam) -> (record{token: text; result: bool; error: text;});
    "c.LeaveGroup": (params: LeaveGroupParams) -> (record{token: text; result: bool; error: text;});
    "d.GetJoinedGroup": (record{ token: text }) -> (record{ token: text; result: vec text; error: text;});
    "e.GetGroupMembers": (record{ token: text; group_id: text;}) -> (record{ token: text; result: vec text; error: text;});
    "f.SendGroupMessage": (params: SendGroupMessageParam) -> (record{ token: text; result: bool; error: text;});
    "g.GetGoupMessage": (record{ token: text; group_id: text;})-> (record{ token: text; result: vec GroupMessage; error: text;});
    "h.GetConnectedMembers": (record{ token: text; }) -> (record{ token: text; result: vec text; error: text;});
    "i.SendDirectMessage": (params: SendDirectMessageParam) -> (record{ token: text; result: bool; error: text;});
    "j.GetDirectMessages": (params: GetDirectMessageParam) -> (record{ token: text; result: vec DirectMessage; error: text;});
    "k.ViewMessage": (record{ token: text; msg_id: text;}) -> (record{ token: text; result: bool;});
}