type CreateWalletResponse = record  {
    "error": text;
    "token": text;
    "phrase": text;
    "btc_address": text;
    "icp_address": text;
    "evm_address": text;
};

type HttpHeader = record { value : text; name : text };
type HttpResponse = record {
  status : nat;
  body : vec nat8;
  headers : vec HttpHeader;
};
type TransformArgs = record { context : vec nat8; response : HttpResponse };

service : {
    "Create_Wallet": (record{
      token: text;
    }) -> (CreateWalletResponse);

    "Import_Wallet": (record{
      token: text;
      phrase: text;
    }) -> (CreateWalletResponse);
    
    "Destroy_Wallet": (record {
      token: text;
    }) -> (record {
      error: text;
      token: text;
      result: bool;
    });

    "Get_Wallet_Address": (record{
      token: text;
    }) -> (CreateWalletResponse);

    "Get_BTC_Balance": (record {
      token: text;
    }) -> (record {
      error: text;
      token: text;
      balance: nat64;
    });

    "Send_BTC": (record {
      token: text;
      destination_address: text;
      amount: nat64;
    }) -> (record {
      error: text;
      token: text;
      result: text;
    });

    "Get_ICP_Balance": (record{
      token: text;
    }) -> (record {
      error: text;
      token: text;
      balance: nat64;
    });

    "Send_ICP":(record {
      token: text;
      destination_address: text;
      amount: nat64;
    }) -> (record {
      error: text;
      token: text;
      result: text;
    });

    "Get_EVM_Balance": (record{
      token: text;
      network: text;
    }) -> (record {
      error: text;
      token: text;
      balance: nat64;
    });

    "Send_EVM":(record {
      token: text;
      network: text;
      destination_address: text;
      amount: nat64;
    }) -> (record {
      error: text;
      token: text;
      result: text;
    });

    "transform" : (TransformArgs) -> (HttpResponse) query;
}
